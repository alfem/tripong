#!/usr/bin/python
"""
Tripong: Triangles Pong Game
(originally named "xolympics")

This file is part of the 'Physics' Project
Physics is a 2D Physics Playground for Kids (supporting Box2D2)
Physics Copyright (C) 2008, Alex Levenson, Brian Jordan
Elements Copyright (C) 2008, The Elements Team, <elements@linuxuser.at>

Wiki:   http://wiki.laptop.org/wiki/Physics
IRC:    #olpc-physics on irc.freenode.org

Code:   http://dev.laptop.org/git?p=activities/physics
        git clone git://dev.laptop.org/activities/physics

License:  GPLv3 http://gplv3.fsf.org/


Modified by Alfonso E.M. <alfonso@el-magnifico.org> to make this game usable
in any standard linux distribution (and Guadalnex!)

"""

import random
import pygame
from pygame.locals import *

import elements
from elements import Elements
from elements import box2d

class XOlympicsGame:
    def __init__(self,screen):
        self.rightscore = self.leftscore = 0
        self.forcespeed = 75
        self.jumpforce = 20
        self.leftDPress = False
        self.rightDPress = False
        self.leftLPress = False
        self.leftRPress = False
        self.leftJump = False
        self.rightLPress = False
        self.rightRPress = False
        self.rightJump = False
        self.updateList = []

        self.screen = screen
        # get everything set up
        self.clock = pygame.time.Clock()
        self.fnt_score = pygame.font.Font(None, 80) # font object

        # set up the world (instance of Elements)
        self.world = elements.Elements(self.screen.get_size())
        self.world.renderer.set_surface(self.screen)

        # set up static environment
        self.world.set_color((0, 255, 0))  
        self.world.add.ground()

        color=self.get_random_color()
        self.world.set_color(color)  
        self.ball = self.world.add.ball((400, 0), 50)

        # ADD LEFT BORDER
        self.world.set_color((255, 0, 0))  
        self.world.add.rect((0,-20), 25, 900, dynamic=False, density=1.0, restitution=0.16, friction=0.5)   
        self.leftplayer = self.world.add.poly(( 264.0, 81.0 ),  ((-109.9405166666667, -64.244016666666653), (110.60718333333335, -63.089316666666605), (-0.66666666666668561, 127.33333333333337)) , dynamic=True, density=1.0, restitution=0.16, friction=0.5, screenCoord=False)
        # ADD RIGHT BORDER
        self.world.set_color((0, 0, 255))  
        self.world.add.rect((800,-20), 25, 900, dynamic=False, density=1.0, restitution=0.16, friction=0.5)   
        self.rightplayer = self.world.add.poly(( 550.0, 78.0 ),  [(108.94051666666667, -65.976066666666611), (2.6666666666666288, 127.33333333333337), (-111.60718333333341, -61.357266666666646)] , dynamic=True, density=1.0, restitution=0.16, friction=0.5, screenCoord=False)

    def get_random_color(self):
        r=random.randint(0,25)*10
        b=250-r
        g=random.randint(200,255)
        return (r,255,b)

    def run(self):
        self.running = True    
        while self.running:

            for event in pygame.event.get():
                if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
                    self.running = False

                if (event.type == KEYDOWN and (event.key == K_x)):
                  self.show_score()

                if (event.type == KEYDOWN and (event.key == K_a or event.key == K_KP4)):
                    self.leftLPress = True
                if (event.type == KEYUP and (event.key == K_a or event.key == K_KP4)):
                    self.leftLPress = False
                if (event.type == KEYDOWN and (event.key == K_s or event.key == K_KP2)):
                    self.leftDPress = True
                if (event.type == KEYUP and (event.key == K_s or event.key == K_KP2)):
                    self.leftDPress = False
                if (event.type == KEYDOWN and (event.key == K_d or event.key == K_KP6)):
                    self.leftRPress = True
                if (event.type == KEYUP and (event.key == K_d or event.key == K_KP6)):
                    self.leftRPress = False
                if (event.type == KEYDOWN and (event.key == K_w or event.key == K_KP8)):
                    self.leftJump = True
                if (event.type == KEYUP and (event.key == K_w or event.key == K_KP8)):
                    self.leftJump = False
                if (event.type == KEYDOWN and (event.key == K_LEFT or event.key == K_KP7)):
                    self.rightLPress = True
                if (event.type == KEYUP and (event.key == K_LEFT or event.key == K_KP7)):
                    self.rightLPress = False
                if (event.type == KEYDOWN and (event.key == K_RIGHT or event.key == K_KP1)):
                    self.rightRPress = True
                if (event.type == KEYUP and (event.key == K_RIGHT or event.key == K_KP1)):
                    self.rightRPress = False
                if (event.type == KEYDOWN and (event.key == K_UP or event.key == K_KP9)):
                    self.rightJump = True
                if (event.type == KEYUP and (event.key == K_UP or event.key == K_KP9)):
                    self.rightJump = False            
                if (event.type == KEYDOWN and (event.key == K_DOWN or event.key == K_KP3)):
                    self.rightDPress = True
                if (event.type == KEYUP and (event.key == K_DOWN or event.key == K_KP3)):
                    self.rightDPress = False             
            if self.leftLPress:
                self.leftplayer.ApplyForce(box2d.b2Vec2(-self.forcespeed,0), self.leftplayer.GetWorldCenter())
            if self.leftRPress:
                self.leftplayer.ApplyForce(box2d.b2Vec2(self.forcespeed,0), self.leftplayer.GetWorldCenter())
            if self.leftJump:
                if self.leftplayer.GetWorldCenter().y < 0.75:
                    self.leftplayer.ApplyImpulse(box2d.b2Vec2(0,self.jumpforce), self.leftplayer.GetWorldCenter())
            if self.rightLPress:
                self.rightplayer.ApplyForce(box2d.b2Vec2(-self.forcespeed,0), self.rightplayer.GetWorldCenter())
            if self.rightRPress:
                self.rightplayer.ApplyForce(box2d.b2Vec2(self.forcespeed,0), self.rightplayer.GetWorldCenter())
            if self.rightDPress:
	            self.rightplayer.ApplyImpulse(box2d.b2Vec2(0,-self.jumpforce), self.rightplayer.GetWorldCenter())
            if self.rightJump:
                if self.rightplayer.GetWorldCenter().y < 0.75:
	                self.rightplayer.ApplyImpulse(box2d.b2Vec2(0,self.jumpforce), self.rightplayer.GetWorldCenter())
            if self.leftDPress:
	            self.leftplayer.ApplyImpulse(box2d.b2Vec2(0,-self.jumpforce), self.leftplayer.GetWorldCenter())

            if self.ball.GetWorldCenter().x < 0.8:
                self.leftscore += 1
                color=self.get_random_color()
                self.world.set_color(color)
# You can delete balls with this strange method:
#                self.world.world.DestroyBody(self.ball)
                self.ball = self.world.add.ball((400, 0), 50)
                self.show_score()
            elif self.ball.GetWorldCenter().x > 7.2:
                self.rightscore += 1
                color=self.get_random_color()
                self.world.set_color(color)
                self.ball = self.world.add.ball((400, 0), 50)
                self.show_score()

            self.screen.fill((255,255,255)) 
            # Update & Draw World
            self.world.update()
            self.world.draw()
            
            pygame.display.flip()  
            
            # Try to stay at 30 FPS
            self.clock.tick(30) # originally 50    

    def show_score(self):
            score=str(self.leftscore)+"-"+str(self.rightscore)
            text = self.fnt_score.render(str(score), 1, (0,255,0))
            width,height=text.get_size()
            self.screen.blit(text, (400-width/2,20))
            pygame.display.flip();
            pygame.time.delay(2000)
                                                              

def main():
    pygame.init()
    pygame.display.init()
    screen = pygame.display.set_mode((800,600),pygame.FULLSCREEN)

    # create an instance of the game
    game = XOlympicsGame(screen) 

    # start the main loop
    game.run()

# make sure that main get's called
if __name__ == '__main__':
    main()

